#include "Sql.h"

/* generated by the following query:

SELECT concat('struct ', TABLE_NAME, ' : public wORMhole::SqlTable\n{\n',
              '  constexpr virtual std::string TableName() const override { return "country"; }\n\n',
              GROUP_CONCAT('  wORMhole::SqlValue<', DATA_TYPE, '> ', COLUMN_NAME, ';' SEPARATOR '\n'),
              '\n};\n\nclass ', TABLE_NAME, 'Query : public wORMhole::SqlQuery<', TABLE_NAME, '>\n{\n',
              GROUP_CONCAT('  wORMhole::SqlColumn<', DATA_TYPE, ', ', TABLE_NAME, '> ', COLUMN_NAME, ' { "', COLUMN_NAME, '" };' SEPARATOR '\n'),
              '\n\n  const std::vector<const wORMhole::SqlColumn*> Columns { ',
              GROUP_CONCAT(CONCAT('&', COLUMN_NAME) SEPARATOR ', '),
              ' };\n\n',
              '  virtual const std::vector<const wORMhole::SqlExpression*>& GetColumns() const override { return Columns; }'
              '\n};\n')
FROM information_schema.COLUMNS
where TABLE_SCHEMA = 'world'
group by TABLE_NAME;


Work In Progress
TODO: replace data types with their C++ equivalents.  Currently using the editor's find/replace feature to do it.

*/

struct city : public wORMhole::SqlTable
{
  constexpr virtual std::string TableName() const override { return "city"; }

  wORMhole::SqlValue<int> ID;
  wORMhole::SqlValue<std::string> Name;
  wORMhole::SqlValue<std::string> CountryCode;
  wORMhole::SqlValue<std::string> District;
  wORMhole::SqlValue<int> Population;
};

struct cityQuery : public wORMhole::SqlQuery<city>
{
  wORMhole::SqlColumn<int, city> ID{"ID"};
  wORMhole::SqlColumn<std::string, city> Name{"Name"};
  wORMhole::SqlColumn<std::string, city> CountryCode{"CountryCode"};
  wORMhole::SqlColumn<std::string, city> District{"District"};
  wORMhole::SqlColumn<int, city> Population{"Population"};

  const std::vector<const wORMhole::SqlExpression*> Columns { &ID, &Name, &CountryCode, &District, &Population };

  virtual const std::vector<const wORMhole::SqlExpression*>& GetColumns() const override { return Columns; }
};

struct country : public wORMhole::SqlTable
{
  constexpr virtual std::string TableName() const override { return "country"; }

  wORMhole::SqlValue<std::string> Code;
  wORMhole::SqlValue<std::string> Name;
  wORMhole::SqlValue<int> Continent;
  wORMhole::SqlValue<std::string> Region;
  wORMhole::SqlValue<double> SurfaceArea;
  wORMhole::SqlValue<short> IndepYear;
  wORMhole::SqlValue<int> Population;
  wORMhole::SqlValue<double> LifeExpectancy;
  wORMhole::SqlValue<double> GNP;
  wORMhole::SqlValue<double> GNPOld;
  wORMhole::SqlValue<std::string> LocalName;
  wORMhole::SqlValue<std::string> GovernmentForm;
  wORMhole::SqlValue<std::string> HeadOfState;
  wORMhole::SqlValue<int> Capital;
  wORMhole::SqlValue<std::string> Code2;
};

struct countryQuery : public wORMhole::SqlQuery<country>
{
  wORMhole::SqlColumn<std::string, country> Code{"Code"};
  wORMhole::SqlColumn<std::string, country> Name{"Name"};
  wORMhole::SqlColumn<int, country> Continent{"Continent"};
  wORMhole::SqlColumn<std::string, country> Region{"Region"};
  wORMhole::SqlColumn<double, country> SurfaceArea{"SurfaceArea"};
  wORMhole::SqlColumn<short, country> IndepYear{"IndepYear"};
  wORMhole::SqlColumn<int, country> Population{"Population"};
  wORMhole::SqlColumn<double, country> LifeExpectancy{"LifeExpectancy"};
  wORMhole::SqlColumn<double, country> GNP{"GNP"};
  wORMhole::SqlColumn<double, country> GNPOld{"GNPOld"};
  wORMhole::SqlColumn<std::string, country> LocalName{"LocalName"};
  wORMhole::SqlColumn<std::string, country> GovernmentForm{"GovernmentForm"};
  wORMhole::SqlColumn<std::string, country> HeadOfState{"HeadOfState"};
  wORMhole::SqlColumn<int, country> Capital{"Capital"};
  wORMhole::SqlColumn<std::string, country> Code2{"Code2"};

  const std::vector<const wORMhole::SqlExpression*> Columns { &Code, &Name, &Continent, &Region, &SurfaceArea, &IndepYear, &Population, &LifeExpectancy, &GNP, &GNPOld, &LocalName, &GovernmentForm, &HeadOfState, &Capital, &Code2 };

  virtual const std::vector<const wORMhole::SqlExpression*>& GetColumns() const override { return Columns; }
};

struct countrylanguage : public wORMhole::SqlTable
{
  constexpr virtual std::string TableName() const override { return "countrylanguage"; }

  wORMhole::SqlValue<std::string> CountryCode;
  wORMhole::SqlValue<std::string> Language;
  wORMhole::SqlValue<int> IsOfficial;
  wORMhole::SqlValue<double> Percentage;
};

struct countrylanguageQuery : public wORMhole::SqlQuery<countrylanguage>
{
  wORMhole::SqlColumn<std::string, countrylanguage> CountryCode{"CountryCode"};
  wORMhole::SqlColumn<std::string, countrylanguage> Language{"Language"};
  wORMhole::SqlColumn<int, countrylanguage> IsOfficial{"IsOfficial"};
  wORMhole::SqlColumn<double, countrylanguage> Percentage{"Percentage"};

  const std::vector<const wORMhole::SqlExpression*> Columns { &CountryCode, &Language, &IsOfficial, &Percentage };

  virtual const std::vector<const wORMhole::SqlExpression*>& GetColumns() const override { return Columns; }
};
